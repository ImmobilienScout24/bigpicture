#!/usr/bin/env python
"""
Usage:
    render-live-model [--model-file=<STRING>] [--variant=<STRING>]

Options:
    --variant=<STRING>   name for the rendered variant [default: all]
"""
import subprocess

import networkx as nx
from docopt import docopt

from bigpicture import retrieve_config, makedirs, init_config

arguments = docopt(__doc__)

variant = arguments.get('--variant')
init_config({'variant': variant})

gexf_file = arguments['--model-file']
if not gexf_file:
    gexf_file = retrieve_config('model-gexf-file', {}, 'live-state')

graphviz_image_prefix = retrieve_config('graphviz-image-prefix', arguments, 'live-state')
gephi_image_prefix = retrieve_config('gephi-image-prefix', arguments, 'live-state')
protocols_to_render = retrieve_config('protocols-to-render', arguments, 'live-state').split()
bigpicture_jar_dir = retrieve_config('jar-dir', {}, 'live-state')
variant_dir = retrieve_config('variant-dir', {}, 'live-state')

print "rendering model in different variants"

print "-- settings"
print "---- protocols to render: %s" % protocols_to_render
print "---- variant dir: %s" % variant_dir
print "---- graphviz image prefix: %s" % graphviz_image_prefix
print "---- gexf file: %s" % gexf_file
print "---- gephi image prefix: %s" % gephi_image_prefix
print "---- bigpicture jar dir: %s" % bigpicture_jar_dir

makedirs(variant_dir)

print "-- gephi rendering"
#result = subprocess.call(['java', '-jar', '%s/bigpicture.jar' % bigpicture_jar_dir, gexf_file, gephi_image_prefix] + protocols_to_render)
#print "---- exit code: %i" % result


result = subprocess.call(['java', '-jar', '%s/bigpicture.jar' % bigpicture_jar_dir, gexf_file, gephi_image_prefix] + ['nfs'])
import sys
sys.exit()


print "-- graphviz rendering"
gm = nx.read_gexf(gexf_file)
print "---- %s: %s nodes, %s edges" % (gexf_file, gm.number_of_nodes(), gm.number_of_edges())
for protocol in protocols_to_render:
    g = gm.copy()
    for u, v, d in gm.edges_iter(data=True):
        if d['protocol'] != protocol:
            g.remove_edge(u, v)
    g2 = g.copy()
    for node in g2.nodes():
        if g2.degree(node) < 1:
            g.remove_node(node)
    print "---- protocol %s: %s nodes, %s edges" % (protocol, g.number_of_nodes(), g.number_of_edges())
    a = nx.to_agraph(g)
    a.graph_attr.update(size='40,30')
    a.node_attr.update(shape='none', fontsize='6', fontcolor='#40404070')
    a.edge_attr.update(splines=True, fontsize='0', arrowsize=.4)
    a.edge_attr.update(decorate=False, group=True, concentrate=True)
    a.edge_attr.update(color='#40404030', fontcolor='transparent')
    for layout in ["neato", "twopi"]:
        filename = "%s.protocol_%s.%s.svg" % (graphviz_image_prefix, protocol, layout)
        print "---- rendering %s" % filename
        a.draw("%s.protocol_%s.%s.svg" % (graphviz_image_prefix, protocol, layout), prog=layout)

print "done."
