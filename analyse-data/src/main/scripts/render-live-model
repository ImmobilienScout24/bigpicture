#!/usr/bin/env python
"""
Usage:
    render-live-model [--model-reduced-dot-file=<STRING>]

"""
import os
import subprocess

import pygraphviz
from docopt import docopt

from bigpicture import retrieve_config


arguments = docopt(__doc__)

dot_file = retrieve_config('model-reduced-dot-file', arguments, 'live-state')
graphviz_image_prefix = retrieve_config('graphviz-image-prefix', arguments, 'live-state')

gexf_file = retrieve_config('model-reduced-gexf-file', arguments, 'live-state')
gephi_image_prefix = retrieve_config('gephi-image-prefix', arguments, 'live-state')
protocols_to_render = retrieve_config('protocols-to-render', arguments, 'live-state').split()
bigpicture_jar_dir = retrieve_config('jar-dir', {}, 'live-state')

print "rendering model in different variants"

print "-- settings"
print "---- protocols to render: %s" % protocols_to_render
print "---- dot file: %s" % dot_file
print "---- graphviz image prefix: %s" % graphviz_image_prefix
print "---- gexf file: %s" % gexf_file
print "---- gephi image prefix: %s" % gephi_image_prefix
print "---- bigpicture jar dir: %s" % bigpicture_jar_dir

print "-- gephi rendering"
try:
    os.makedirs(os.path.dirname(gephi_image_prefix))
except OSError, e:
    if e.errno != 17:
        raise e
result = subprocess.call(['java', '-jar', '%s/bigpicture.jar' % bigpicture_jar_dir, gexf_file, gephi_image_prefix] + protocols_to_render)
print "---- exit code: %i" % result

print "-- graphviz rendering"
try:
    os.makedirs(os.path.dirname(graphviz_image_prefix))
except OSError, e:
    if e.errno != 17:
        raise e
for layout in []: # ["neato", "twopi"]:    # dot: takes too long for large graphs
    print "---- %s layout" % layout
    graph = pygraphviz.AGraph(dot_file)
    graph.graph_attr.update(size='40,30')
    graph.node_attr.update(shape='none', fontsize='6', fontcolor='#40404070')
    graph.edge_attr.update(splines=True, fontsize='0', arrowsize=.4)
    graph.edge_attr.update(decorate=False, group=True, concentrate=True)
    graph.edge_attr.update(color='#40404030', fontcolor='transparent')
    graph.layout(prog=layout)
    graph.draw(graphviz_image_prefix + ".%s.pdf" % layout)

print "done."
