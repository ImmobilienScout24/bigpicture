#!/usr/bin/env python
"""
Usage:
    render-live-model [--model-file=<STRING>] [--variant=<STRING>]

Options:
    --variant=<STRING>   name for the rendered variant [default: all]
"""
import subprocess

import networkx as nx
import matplotlib.pyplot as plt
from docopt import docopt

from bigpicture import retrieve_config, makedirs, init_config, get_config


def filter(gm, protocol):
    g = gm.copy()
    for u, v, d in gm.edges_iter(data=True):
        if d['protocol'] != protocol:
            g.remove_edge(u, v)
    g2 = g.copy()
    for node in g2.nodes():
        if g2.degree(node) < 1:
            g.remove_node(node)
    return g


def get_graph_info(g, filename):
    return "%s: %s nodes, %s edges" % (filename, g.number_of_nodes(), g.number_of_edges())

arguments = docopt(__doc__)

variant = arguments.get('--variant')
init_config({'variant': variant})

gexf_file = arguments['--model-file']
if not gexf_file:
    gexf_file = retrieve_config('model-gexf-file', {}, 'live-state')

graphviz_image_prefix = retrieve_config('graphviz-image-prefix', arguments, 'live-state')
gephi_image_prefix = retrieve_config('gephi-image-prefix', arguments, 'live-state')
networkx_image_prefix = retrieve_config('networkx-image-prefix', arguments, 'live-state')
protocols_to_render = retrieve_config('protocols-to-render', arguments, 'live-state').split()
bigpicture_jar_dir = retrieve_config('jar-dir', {}, 'live-state')
variant_dir = retrieve_config('variant-dir', {}, 'live-state')

print "rendering model in different variants"

print "-- settings"
print "---- protocols to render: %s" % protocols_to_render
print "---- variant dir: %s" % variant_dir
print "---- graphviz image prefix: %s" % graphviz_image_prefix
print "---- gexf file: %s" % gexf_file
print "---- gephi image prefix: %s" % gephi_image_prefix
print "---- bigpicture jar dir: %s" % bigpicture_jar_dir
print "---- networkx image prefix: %s" % networkx_image_prefix

makedirs(variant_dir)



print "-- gephi rendering"
result = subprocess.call(['java', '-jar', '%s/bigpicture.jar' % bigpicture_jar_dir, gexf_file, gephi_image_prefix] + protocols_to_render)
print "---- exit code: %i" % result



print "-- networkx rendering"
gephi_file = get_config('live-state', 'gephi-image-prefix') + ".gexf"
gm = nx.read_gexf(gephi_file)
print "---- %s" % get_graph_info(gm, gephi_file)
u, v, d = gm.edges(data=True)[0]
render_diff = 'diff-type' in d
if render_diff:
    print "---- diff-type found, rendering differences"

class PositionMapper(object):
    def __init__(self, graph):
        self.graph = graph
    def __getitem__(self, name):
        node = self.graph.node[name]
        pos = node.get('viz', {}).get('position', {})
        return (pos['x'], pos['y'])

def create_edge_color_mapper(graph, key, mapping):
    return [mapping.get(d.get(key, ""), "lightgrey") for u, v, d in graph.edges_iter(data=True)]


for protocol in protocols_to_render:
    g = filter(gm, protocol)
    print "---- protocol %s: %s nodes, %s edges" % (protocol, g.number_of_nodes(), g.number_of_edges())

    print "------ rendering graph"
    plt.figure(figsize=(40, 30))
    nx.draw_networkx(g,
        pos=PositionMapper(g),
        node_size=60,
        node_color='lightgrey',
        node_shape='.',
        edge_color=create_edge_color_mapper(g, 'diff-type', {'lost': 'lightgrey', 'new': 'green'}),
        font_size=10)

    limits = plt.axis('off')
    filename = "%s.protocol_%s.svg" % (networkx_image_prefix, protocol)
    print "-------- writing %s" % filename
    plt.savefig(filename, orientation='landscape')

    print "------ rendering modularity"
    modules = {}
    colors = {}
    h = nx.DiGraph()
    for u, v, d in g.edges_iter(data=True):
        uu = g.node[u]['Modularity Class']
        vv = g.node[v]['Modularity Class']
        modules.setdefault(uu, set()).add(u)
        modules.setdefault(vv, set()).add(v)
        colors[uu] = g.node[u]['viz']['color']
        colors[vv] = g.node[v]['viz']['color']
        if uu != vv:
            h.add_edge(uu, vv, attr_dict=d)
    print "-------- %i clusters found" % len(modules)

    print "------ rendering svg"
    a = nx.to_agraph(h)
    for n in a.nodes():
        members = sorted(modules[int(n)])
        hosts_per_line = 5
        n.attr.update(label="\\n".join([" ".join(members[i:i+hosts_per_line]) for i in range(0, len(members), hosts_per_line)]))
        n.attr.update(fillcolor='#%(r)02x%(g)02x%(b)02x22' % colors[int(n)])

    a.graph_attr.update(size='20,15', ratio=.5, bgcolor='transparent') #, model='subset')
    a.graph_attr.update(ranksep=5)
    a.node_attr.update(shape='box', color='white', fontsize='6', fontcolor='#ffffff', style='filled')
    a.edge_attr.update(mindist='1', len='5', splines=True, fontsize='0', arrowsize=.4)
    a.edge_attr.update(decorate=False, group=True, concentrate=True)
    a.edge_attr.update(color='#40404030', fontcolor='transparent')
    for layout in ['neato', 'circo', 'twopi']:
        init_config({'variant': variant, 'protocol': protocol, 'layout': layout})
        filename = get_config('live-state', 'clustered-protocol-layout-svg-file')
        print "------ writing %s" % filename
        a.draw(filename, prog=layout)



#print "-- graphviz rendering"
#gm = nx.read_gexf(gexf_file)
#print "---- %s" % get_graph_info(gm, gexf_file)
#for protocol in protocols_to_render:
#    g = filter(gm, protocol)
#    print "---- protocol %s: %s nodes, %s edges" % (protocol, g.number_of_nodes(), g.number_of_edges())
#    if g.number_of_edges() > 4000:
#        print "------ skipping because there are too many edges"
#        continue
#    a = nx.to_agraph(g)
#    a.graph_attr.update(size='40,30')
#    a.node_attr.update(shape='none', fontsize='6', fontcolor='#40404070')
#    a.edge_attr.update(splines=True, fontsize='0', arrowsize=.4)
#    a.edge_attr.update(decorate=False, group=True, concentrate=True)
#    a.edge_attr.update(color='#40404030', fontcolor='transparent')
#    for layout in ["neato", "twopi"]:
#        filename = "%s.protocol_%s.%s.svg" % (graphviz_image_prefix, protocol, layout)
#        print "---- rendering %s" % filename
#        a.draw("%s.protocol_%s.%s.svg" % (graphviz_image_prefix, protocol, layout), prog=layout)
#        #a.write("%s.protocol_%s.%s.dot" % (graphviz_image_prefix, protocol, layout))

print "done."
